Number of permutations when 'r' elements are arranged out of a total of 'n' elements is n Pr = n! / (n - r)!. 
For example, let n = 4 (A, B, C and D) and r = 2 (All permutations of size 2). The answer is 4!/(4-2)! = 12. 
The twelve permutations are AB, AC, AD, BA, BC, BD, CA, CB, CD, DA, DB and DC.

Important Properties of Permutation:
n P n = n*(n-1)*(n-2)*......*1 = n!.
n P 0 = n! / n! = 1.
n P 1 = n.
n P n-1 = n!.
n P r/n P r-1 = n - r + 1.

Permutation with repetition allowed: The number of permutation or arrangements of N numbers with repetition allowed will be NN. 
For Example, permutaions of {1,2} with repetitions will be {{1,1}, {1,2}, {2,1},{2,2}}.

Permutation with duplicates: The number of permutations or arrangements of N objects of which p1 are of one kind, 
p2 are of second kind, ..., pk are of k-th kind and the rest if any, are of different kinds is:
N! / (p1! * p2! *....*pk!).


Combination
Combination is the different selections of a given number of elements taken one by one, or some, or all at a time. 
For example, if we have two elements A and B, then there is only one way to 00select two items, we select both of them.

Number of combinations when 'r' elements are selected out of a total of 'n' elements is n C r = n! / [ (r !) * (n - r)! ]. 
For example, let n = 4 (A, B, C and D) and r = 2 (All combinations of size 2). The answer is 4!/((4-2)!*2!) = 6. 
The six combinations are AB, AC, AD, BC, BD, CD.

Important Properties of Combination:
n C 0 = n C n = 1.
n C r = n C n-r.
n C r + n C r-1 = n+1 C r.
n * n-1 C r-1 = (n - r + 1)* n C r-1.

from itertools import permutations 
  
# Get all permutations of length 2 
# and length 2 
perm = permutations([1, 2, 3], 2) 
  
# Print the obtained permutations 
for i in list(perm): 
    print i 
from itertools import combinations 
  
# Get all combinations of [1, 2, 3] 
# and length 2 
comb = combinations([1, 2, 3], 2) 
  
# Print the obtained combinations 
for i in list(comb): 
    print i 

from itertools import combinations_with_replacement 
  
# Get all combinations of [1, 2, 3] and length 2 
comb = combinations_with_replacement([1, 2, 3], 2) 
  
# Print the obtained combinations 
for i in list(comb): 
    print i 

# Python function to print permutations of a given list 
def permutation(lst): 
  
    # If lst is empty then there are no permutations 
    if len(lst) == 0: 
        return [] 
  
    # If there is only one element in lst then, only 
    # one permuatation is possible 
    if len(lst) == 1: 
        return [lst] 
  
    # Find the permutations for lst if there are 
    # more than 1 characters 
  
    l = [] # empty list that will store current permutation 
  
    # Iterate the input(lst) and calculate the permutation 
    for i in range(len(lst)): 
       m = lst[i] 
  
       # Extract lst[i] or m from the list.  remLst is 
       # remaining list 
       remLst = lst[:i] + lst[i+1:] 
  
       # Generating all permutations where m is first 
       # element 
       for p in permutation(remLst): 
           l.append([m] + p) 
    return l 
  
  
# Driver program to test above function 
data = list('123') 
for p in permutation(data): 
    print p 
Output:

['1', '2', '3']
['1', '3', '2']
['2', '1', '3']
['2', '3', '1']
['3', '1', '2']
['3', '2', '1']
Method 3 (Direct Function)
We can do it by simply using the built-in permutation function in itertools library. It is the shortest technique to 
find the permutation.

from itertools import permutations 
l = list(permutations(range(1, 4))) 
print 1
