General Formulas to solve problems related to Arithmetic Progressions: If ‘a’ is the first term and ‘d’ is the common difference:
nth term of an AP = a + (n-1)*d.
Arithmetic Mean = Sum of all terms in the AP / Number of terms in the AP.
Sum of ‘n’ terms of an AP = 0.5 n (first term + last term) = 0.5 n [ 2a + (n-1) d ].

The behavior of the arithmetic progression depends on the common difference d. 
If the common difference is:positive, then the members (terms) will grow towards positive 
infinity or negative, then the members (terms) will grow towards negative infinity.

The behaviour of a geometric sequence depends on the value of the common ratio. If the common ratio is:
Positive, the terms will all be the same sign as the initial term.
Negative, the terms will alternate between positive and negative.
Greater than 1, there will be exponential growth towards positive or negative infinity (depending on the sign of the initial term).
1, the progression is a constant sequence.
Between -1 and 1 but not zero, there will be exponential decay towards zero.
-1, the progression is an alternating sequence.
Less than -1, for the absolute values there is exponential growth towards (unsigned) infinity, due to the alternating sign.

General Formulas to solve problems related to Geometric Progressions:

If ‘a’ is the first term and ‘r’ is the common ratio:
nth term of a GP = a*rn-1.
Geometric Mean = nth root of product of n terms in the GP.
Sum of ‘n’ terms of a GP (r < 1) = [a (1 – rn)] / [1 – r].
Sum of ‘n’ terms of a GP (r > 1) = [a (rn – 1)] / [r – 1].
Sum of infinite terms of a GP (r < 1) = (a) / (1 – r).

import statistics 
  
# list of positive integer numbers 
data1 = [1, 3, 4, 5, 7, 9, 2] 
  
x = statistics.mean(data1) 
  
# Printing the mean 
print("Mean is :", x)

from statistics import mean 
  
# Importing fractions module as fr 
# Enables to calculate mean of a  
# set in Fraction  
from fractions import Fraction as fr 
  
  
# tuple of positive integer numbers 
data1 = (11, 3, 4, 5, 7, 9, 2) 
  
# tuple of a negative set of integers 
data2 = (-1, -2, -4, -7, -12, -19) 
  
# tuple of mixed range of numbers 
data3 = (-1, -13, -6, 4, 5, 19, 9) 
  
# tuple of a set of fractional numbers 
data4 = (fr(1, 2), fr(44, 12), fr(10, 3), fr(2, 3)) 
  
# dictionary of a set of values 
# Only the keys are taken in 
# consideration by mean() 
data5 = {1:"one", 2:"two", 3:"three"} 
  
  
# Printing the mean of above datsets 
print("Mean of data set 1 is % s" % (mean(data1))) 
print("Mean of data set 2 is % s" % (mean(data2))) 
print("Mean of data set 3 is % s" % (mean(data3))) 
print("Mean of data set 4 is % s" % (mean(data4))) 
print("Mean of data set 5 is % s" % (mean(data5)))

from scipy.stats.mstats import gmean  
arr1 = gmean([1, 3, 27])  
   
print("Geometric Mean is :", arr1)

from scipy.stats.mstats import gmean 
arr1 = [[1, 3, 27],  
        [3, 4, 6],  
        [7, 6, 3],  
        [3, 6, 8]]  
   
print("Geometric Mean is :", gmean(arr1))  
  
# using axis = 0 
print("\nGeometric Mean is with default axis = 0 : \n",  
      gmean(arr1, axis = 0)) 
  
# using axis = 1 
print("\nGeometric Mean is with default axis = 1 : \n",  
      gmean(arr1, axis = 1))   
Output:
Geometric Mean is : [ 2.81731325  4.55901411  7.89644408]

Geometric Mean is with default axis = 0 : 
 [ 2.81731325  4.55901411  7.89644408]

Geometric Mean is with default axis = 1 : 
 [ 4.32674871  4.16016765  5.01329793  5.24148279]
 import math 
  
# function to calculate  
# geometric mean and  
# return float value. 
def geometricMean(arr, n): 
      
    # declare sum variable and 
    # initialize it to 1. 
    sum = 0; 
      
    # Compute the sum of all  
    # the elements in the array. 
    for i in range(n): 
        sum = sum + math.log(arr[i]); 
      
    # compute geometric mean  
    # through formula antilog 
    # (((log(1) + log(2) + . . 
    # ... + log(n))/n) 
    # and return the value to  
    # main function. 
    sum = sum / n; 
      
    return math.exp(sum); 
  
# Driver Code 
arr= [ 1, 2, 3, 4, 5, 6, 7, 8 ]; 
n = len(arr); 
  
# function call 
print(geometricMean(arr, n)); 
  
# This code is contributed by mits. 

Output:
3.76435

